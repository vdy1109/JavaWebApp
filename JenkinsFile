pipeline {
    agent any


    parameters {
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/vdy1109/JavaWebApp.git')
        string(name: 'BRANCH', defaultValue: 'main')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1')
        string(name: 'DEPLOYMENT_NAME', defaultValue: 'javawebapp')
        string(name: 'CONTAINER_NAME', defaultValue: 'javawebapp')
        string(name: 'ECR_REPO', defaultValue: 'my-docker-repo')
    }

    environment {
        BUILD_TAG = "${BUILD_NUMBER}"
        ECR_URI = "223938610757.dkr.ecr.${params.AWS_REGION}.amazonaws.com"
        IMAGE_TAG = "${params.DEPLOYMENT_NAME}-${BUILD_TAG}"
        LATEST_TAG = "${params.DEPLOYMENT_NAME}-latest"
        FULL_IMAGE_TAG = "${ECR_URI}/${params.ECR_REPO}:${IMAGE_TAG}"
        FULL_LATEST_TAG = "${ECR_URI}/${params.ECR_REPO}:${LATEST_TAG}"
    }

    stages {

        stage('Configure AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-eks-creds']]) {
                    sh '''
                        aws sts get-caller-identity
                        aws eks update-kubeconfig --region us-east-1 --name my-cluster
                    '''
                }
            }


        stage('Checkout') {
            steps {
                git url: "${params.GIT_REPO}", branch: "${params.BRANCH}"
            }
        }

        stage('Login to ECR') {
            steps {
                sh """
                aws ecr get-login-password --region ${params.AWS_REGION} | \
                docker login --username AWS --password-stdin ${ECR_URI}
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t ${params.DEPLOYMENT_NAME}:${BUILD_TAG} .
                docker tag ${params.DEPLOYMENT_NAME}:${BUILD_TAG} ${FULL_IMAGE_TAG}
                docker tag ${params.DEPLOYMENT_NAME}:${BUILD_TAG} ${FULL_LATEST_TAG}
                """
            }
        }

        stage('Push to ECR') {
            steps {
                sh """
                docker push ${FULL_IMAGE_TAG}
                docker push ${FULL_LATEST_TAG}
                """
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh """
                kubectl apply -f deployment.yaml --validate=false
                kubectl set image deployment/${params.DEPLOYMENT_NAME} ${params.CONTAINER_NAME}=${FULL_LATEST_TAG}
                kubectl rollout status deployment/${params.DEPLOYMENT_NAME}
                """
            }
        }
    }

    post {
        success {
            echo "Successfully deployed ${FULL_LATEST_TAG} to EKS!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
